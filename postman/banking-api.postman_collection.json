{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Core Banking API - Money Transfer System",
		"description": "Complete API collection for testing the Core Banking System with authentication, transactions, fraud detection, and admin endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Authentication",
			"item": [
				{
					"name": "Register Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User registered successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test_customer\",\n    \"email\": \"testcustomer@example.com\",\n    \"password\": \"Test@123\",\n    \"password2\": \"Test@123\",\n    \"role\": \"customer\",\n    \"phone_number\": \"+1234567890\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register/",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register", ""]
						}
					}
				},
				{
					"name": "Login - John (Customer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwt_token\", jsonData.access);",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh);",
									"    pm.expect(jsonData).to.have.property('access');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john@example.com\",\n    \"password\": \"Test@123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login/",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login", ""]
						}
					}
				},
				{
					"name": "Login - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"admin_jwt_token\", jsonData.access);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@bank.com\",\n    \"password\": \"Admin@123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login/",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login", ""]
						}
					}
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/token/refresh/",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "token", "refresh", ""]
						}
					}
				}
			]
		},
		{
			"name": "2. Banking",
			"item": [
				{
					"name": "Get Account Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Account details retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"john_account\", jsonData.account_number);",
									"    pm.expect(jsonData).to.have.property('balance');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/banking/account/",
							"host": ["{{base_url}}"],
							"path": ["api", "banking", "account", ""]
						}
					}
				}
			]
		},
		{
			"name": "3. Transactions - Success",
			"item": [
				{
					"name": "Transfer Money - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Transfer successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.expect(jsonData).to.have.property('transaction_id');",
									"    pm.expect(jsonData.flagged).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver_account\": \"{{jane_account}}\",\n    \"amount\": 500.00,\n    \"description\": \"Test transfer\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer/",
							"host": ["{{base_url}}"],
							"path": ["api", "transactions", "transfer", ""]
						}
					}
				},
				{
					"name": "Get Transaction History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Transaction history retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/transactions/history/",
							"host": ["{{base_url}}"],
							"path": ["api", "transactions", "history", ""]
						}
					}
				}
			]
		},
		{
			"name": "4. Transactions - Validations",
			"item": [
				{
					"name": "Transfer - Insufficient Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Insufficient balance error\", function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include('Insufficient');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver_account\": \"{{jane_account}}\",\n    \"amount\": 999999.00,\n    \"description\": \"Too large amount\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer/",
							"host": ["{{base_url}}"],
							"path": ["api", "transactions", "transfer", ""]
						}
					}
				},
				{
					"name": "Transfer - Invalid Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid account error\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver_account\": \"INVALID123456\",\n    \"amount\": 100.00,\n    \"description\": \"Invalid account test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer/",
							"host": ["{{base_url}}"],
							"path": ["api", "transactions", "transfer", ""]
						}
					}
				},
				{
					"name": "Transfer - Negative Amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Negative amount error\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver_account\": \"{{jane_account}}\",\n    \"amount\": -100.00,\n    \"description\": \"Negative amount test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer/",
							"host": ["{{base_url}}"],
							"path": ["api", "transactions", "transfer", ""]
						}
					}
				},
				{
					"name": "Transfer - Same Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Same account error\", function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include('same account');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver_account\": \"{{john_account}}\",\n    \"amount\": 100.00,\n    \"description\": \"Self transfer test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer/",
							"host": ["{{base_url}}"],
							"path": ["api", "transactions", "transfer", ""]
						}
					}
				}
			]
		},
		{
			"name": "5. Security Tests",
			"item": [
				{
					"name": "Transfer - No JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized without token\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver_account\": \"{{jane_account}}\",\n    \"amount\": 100.00,\n    \"description\": \"No auth test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer/",
							"host": ["{{base_url}}"],
							"path": ["api", "transactions", "transfer", ""]
						}
					}
				}
			]
		},
		{
			"name": "6. Fraud Detection",
			"item": [
				{
					"name": "Transfer - Large Amount (Flagged)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Large transfer flagged\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.flagged).to.be.true;",
									"    pm.expect(jsonData.fraud_score).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver_account\": \"{{jane_account}}\",\n    \"amount\": 15000.00,\n    \"description\": \"Large transfer for fraud detection test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer/",
							"host": ["{{base_url}}"],
							"path": ["api", "transactions", "transfer", ""]
						}
					}
				}
			]
		},
		{
			"name": "7. Admin Endpoints",
			"item": [
				{
					"name": "View Flagged Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Flagged transactions retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/transactions/flagged/",
							"host": ["{{base_url}}"],
							"path": ["api", "transactions", "flagged", ""]
						}
					}
				},
				{
					"name": "View Audit Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Audit logs retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/audit/logs/",
							"host": ["{{base_url}}"],
							"path": ["api", "audit", "logs", ""]
						}
					}
				}
			]
		},
		{
			"name": "8. API Documentation",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/health/",
							"host": ["{{base_url}}"],
							"path": ["api", "health", ""]
						}
					}
				},
				{
					"name": "Swagger UI",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/docs/",
							"host": ["{{base_url}}"],
							"path": ["api", "docs", ""]
						}
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000"
		},
		{
			"key": "jwt_token",
			"value": ""
		},
		{
			"key": "admin_jwt_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "john_account",
			"value": ""
		},
		{
			"key": "jane_account",
			"value": ""
		}
	]
}
